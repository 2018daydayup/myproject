问题描述：有m*n的方格，最左上角为A点，最右下角为B点，
现在需要从A点开始，沿着黑色的线条走到B点，每次只能往
右或者往下移动，问共有多少种不同的走法？

解法一：动态规划
function getWaySum($m, $n){
	//构建一个mxn的二维数组
	$arr = [];
	$brr = [];
	for($i = 0; $i < $m; $i++){
		$arr[$i] = 0;
	}
	for($i = 0; $i < $n; $i++){
		$brr[$i] = $arr;
	}
	//将二维数组的第一行和第一列设置为1
	for($i = 0, $j = 0; $i < $m, $j < $n; $i++, $j++){
		$brr[0][$i] = 1;
		$brr[$j][0] = 1;
	}
	//计算路径的条数
	for($i = 1; $i < $m; $i++){
		for($j = 1; $j < $n; $j++){
			$brr[$i][$j] = $brr[$i - 1][$j] + $brr[$i][$j - 1];
		}
	}
	return $brr[$m - 1][$n - 1];
}

解法二：递归
function getWaySum($m, $n){
	if($m == 1 || $n == 1){
		return 1;
	}

	$sum = $this->getWaySum($m - 1, $n) + $this->getWaySum($m, $n - 1);
	return $sum;
}

